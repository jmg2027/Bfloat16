import test

# Use this for conversion of test set into fdata.h
def convert_fdata(test_list):
	hex_set = list()
	for a, b in test_list:
		h1, h2 = utils.float_to_hex(a), utils.float_to_hex(b)
		#hex_set.append((h1, h2))
		hex_set.append(h1)
		hex_set.append(h2)
	print(hex_set)
	return hex_set

# run python random test
def mul_hex_list():
    mul_test_list = test.test_mul.rand_test(10)
    a_input = list()
    b_input = list()
    res = list()
    for e in mul_test_list:
        a_input.append(e[0].hex())
        b_input.append(e[1].hex())
        res.append(e[2].hex())
    return

#def convert_fdata(a, b, res):
map()
#    return
# make random inputs fdata.h
# save result values as result.txt
# run chessmk
# compare test.mem & result.txt

# fdata.h format:
#for vector accumulation: 
"""
{
    {0x4309, 0x4019, 0x3ab3, 0xbcd9, 0xbec3, 0x4450, 0x3e02, 0x3e45, 0x3f77, 0xbceb, 0xc14b, 0x3b7e, 0xbe45, 0xc1a8, 0x3f25, 0xc174, 0x41c0, 0xbfed, 0x448a, 0xbc24, 0xbc96, 0xc1d5, 0x3e58, 0xbbf6, 0xbbb5, 0xc0b8, 0xbf67, 0x413f, 0xbc90, 0xba83, 0x3e6e, 0xbb4d}
    , {0x40f4, 0x40af, 0xbf03, 0xc38b, 0xbff9, 0xc479, 0xbb98, 0x418d, 0xbdec, 0x3e5c, 0xbebd, 0x3eab, 0x3acf, 0xbe0d, 0x4409, 0xc116, 0x3eac, 0x4335, 0x420d, 0xc27a, 0xc054, 0xc112, 0xc1ca, 0x4119, 0xc104, 0x3afd, 0x405e, 0xbc6c, 0x3ff1, 0xbbd6, 0x4062, 0x4157}
        }
    , {
        {0x4309, 0x4019, 0x3ab3, 0xbcd9, 0xbec3, 0x4450, 0x3e02, 0x3e45, 0x3f77, 0xbceb, 0xc14b, 0x3b7e, 0xbe45, 0xc1a8, 0x3f25, 0xc174, 0x41c0, 0xbfed, 0x448a, 0xbc24, 0xbc96, 0xc1d5, 0x3e58, 0xbbf6, 0xbbb5, 0xc0b8, 0xbf67, 0x413f, 0xbc90, 0xba83, 0x3e6e, 0xbb4d}
    ,   {0x40f4, 0x40af, 0xbf03, 0xc38b, 0xbff9, 0xc479, 0xbb98, 0x418d, 0xbdec, 0x3e5c, 0xbebd, 0x3eab, 0x3acf, 0xbe0d, 0x4409, 0xc116, 0x3eac, 0x4335, 0x420d, 0xc27a, 0xc054, 0xc112, 0xc1ca, 0x4119, 0xc104, 0x3afd, 0x405e, 0xbc6c, 0x3ff1, 0xbbd6, 0x4062, 0x4157}
        }
"""
# for vector arith:
# {0x4309, 0x4019, 0x3ab3, 0xbcd9, 0xbec3, 0x4450, 0x3e02, 0x3e45, 0x3f77, 0xbceb, 0xc14b, 0x3b7e, 0xbe45, 0xc1a8, 0x3f25, 0xc174, 0x41c0, 0xbfed, 0x448a, 0xbc24, 0xbc96, 0xc1d5, 0x3e58, 0xbbf6, 0xbbb5, 0xc0b8, 0xbf67, 0x413f, 0xbc90, 0xba83, 0x3e6e, 0xbb4d}
#    , {0x40f4, 0x40af, 0xbf03, 0xc38b, 0xbff9, 0xc479, 0xbb98, 0x418d, 0xbdec, 0x3e5c, 0xbebd, 0x3eab, 0x3acf, 0xbe0d, 0x4409, 0xc116, 0x3eac, 0x4335, 0x420d, 0xc27a, 0xc054, 0xc112, 0xc1ca, 0x4119, 0xc104, 0x3afd, 0x405e, 0xbc6c, 0x3ff1, 0xbbd6, 0x4062, 0x4157}

# for scalar arith:
# 	0x40000000, 0x41400000,
#	0xc0000000, 0x41400000, 
#	0x40000000, 0xc1400000, 
# maybe convert to this:
# 	{0x40000000, 0x41400000},
#	{0xc0000000, 0x41400000}, 
#	{0x40000000, 0xc1400000}, 
