from .commonimport import *
from test.utils import *
from test.test_class import TestOperationBase

from typing_extensions import Self

bf16_mant_max = float(bf16(0, 0, 127))
# Match vector_element_num to FloatSummation.vector_element_num
#vector_element_num = 64
vector_element_num = 32
rand_vector_num = 10



class TestSummation(TestOperationBase):
    #test_set = [
    #    [
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    #1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
    #     ],
    #    [
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max,
    #bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max, bf16_mant_max
    #     ]
    #]
    test_set = [
    #    [
    #        [
    #1.0, 1.0, 1.0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ],
    #    [
    #1.0, 2.0, 4.0, 8.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ],
    #    [
    #1.0, 2.0, 3.0, 4.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ],
    #    [
    #-1.0, -1.0, -1.0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ],
    #    [
    #-1.0, -2.0, -4.0, -8.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ],
    #    [
    #-1.0, -2.0, -3.0, -4.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    #     ]
    #     ],
    # These are adoptable error I think...
    #FAILED SUM([458.0, -1184.0, 0.0036163330078125, -0.0035858154296875]), bf16: Bfloat16(-724.0, sign = 1, exponent=9, mantissa=53), tfbf16: -728
    #FAILED SUM([-0.00173187255859375, 744.0, -744.0, 0.00811767578125]), bf16: Bfloat16(0.006378173828125, sign = 0, exponent=-8, mantissa=81), tfbf16: 0.00640869
    #FAILED SUM([-308.0, 0.00628662109375, -0.006256103515625, 1528.0]), bf16: Bfloat16(1224.0, sign = 0, exponent=10, mantissa=25), tfbf16: 1216
    #FAILED SUM([-44.0, 0.0027923583984375, 1776.0, -0.00274658203125]), bf16: Bfloat16(1736.0, sign = 0, exponent=10, mantissa=89), tfbf16: 1728
    #[[458.0, -1184.0, 0.0036163330078125, -0.0035858154296875],
    #[-0.00173187255859375, 744.0, -744.0, 0.00811767578125],
    #[-308.0, 0.00628662109375, -0.006256103515625, 1528.0],
    #[-44.0, 0.0027923583984375, 1776.0, -0.00274658203125],]

    # It fails...
    #[[-0.00173187255859375, 744.0, -744.0, 0.00811767578125,0,0,0,0,0,0,0,0,0,0,0,0,
    #  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
    #[[-1.0, -1.0, -1.0, -1.0,0,0,0,0,0,0,0,0,0,0,0,0,
    #  -1.0,-1.0,-1.0,-1.0,0,0,0,0,0,0,0,0,0,0,0,0]],
    #[[1.0, 1.0, 1.0, 1.0,0,0,0,0,0,0,0,0,0,0,0,0,
    #  1.0,1.0,1.0,1.0,0,0,0,0,0,0,0,0,0,0,0,0]],
    # It passes
    #[-0.00173187255859375, 0, 0, 0.00811767578125],
    # It seems tf.reduce_sum works different way from summation unit
    #[-0.00173187255859375, 100000, -100000, 0.00811767578125],
    #[-0.00173187255859375, 10000, -10000, 0.00811767578125],
    # This is special case for larger align bit
    #[-0.00173187255859375, 1000000000000000, -1000000000000000, 0.00811767578125],
    #[0, 0, 0, 0],
    #[-10, 10, -100, 100],
    #[0, 0, 0, float(bf16(0, -126, 0))],
    ## Special cases
    #['nan', 1.0, 2.0, 3.0],
    #['inf', 1.0, 2.0, 3.0],
    #['-inf', 1.0, 2.0, 3.0],
    #['inf', '-inf', 2.0, 3.0],
    #['inf', 1.0, 'inf', 3.0],
    #['-inf', 1.0, 2.0, '-inf'],
    #FAILED SUM([1.2864312886424686e-20, 7.551635855174848e+19, 1.169720636290726e+38, 2.7249173913590775e+38]), bf16: Bfloat16(nan, sign = 0, exponent=128, mantissa=18), tfbf16: inf
    #[1.2864312886424686e-20, 7.551635855174848e+19, 1.169720636290726e+38, 2.7249173913590775e+38],
    #[float(bf16(0,bf16.exp_max, bf16.mant_max)), float(bf16(0,bf16.exp_max, bf16.mant_max)), float(bf16(0,bf16.exp_max, bf16.mant_max)), float(bf16(0,bf16.exp_max, bf16.mant_max))],
    #[float(bf16(0,bf16.exp_max, 0)), float(bf16(0,bf16.exp_max, 0)), float(bf16(0,bf16.exp_max, 0)), float(bf16(0,bf16.exp_max, 0))],
    #[float(bf16(0,bf16.exp_max-1, bf16.mant_max)), float(bf16(0,bf16.exp_max-1, bf16.mant_max)), float(bf16(0,bf16.exp_max-1, bf16.mant_max)), float(bf16(0,bf16.exp_max-1, bf16.mant_max))],
    #[float(bf16(0,bf16.exp_max-1, bf16.mant_max))] * vector_element_num,
    # Simple + cause wrong result:
    # tf_vector_sum: 6.64614e+35
    # bfloat16: 1.2773050271995676e+36
    # python float: 1.2773861911840086e+36
    # tf_reduce_sum: 1.2773050271995676e+36 (PASS)
    #FAILED SUM([-2.4441935897665156e+20, 6.742775440216064e-07, -5.7931972727168054e-30, -2.1281525885478956e-32, 23776938950656.0, 3.3034284942917713e-20, 2.633107345841924e-35, -1.3658406274475593e-20, -2.6893296075324036e-20, 578813952.0, 14499809591296.0, -0.0458984375, -1.025638970498251e+22, -7.552869850948055e-26, 8.851494298807439e-20, 1.5795024613113804e+20, -16710107136.0, -7.34398467671166e+37, -0.00013446807861328125, 7.691059161069047e-19, -4.9611955367415196e-31, 5.662441253662109e-07, -6.810088283353266e-31, -2.9907629905160607e+37, 614180323328.0, 4.21614504913028e+36, -1.4653669987499396e-19, 54150947667968.0, 5.760204327437074e+33, -6.422418416702717e+24, -102804337197056.0, -4.579669976578771e-16, 106954752.0, 4.85722573273506e-17, -1032.0, 6.72084247699335e-25, -243712.0, 2.8719891998770765e+34, 6.273337765602162e-21, 2.55351295663786e-14, 1.1994118882018901e-22, -4.551514126383897e-35, 1.2048817095928447e-37, -3.893774191965349e-12, 0.0, 1.3624586956795388e+38, -7.229752424169529e-26, 6.938893903907228e-15, -4.188347653454561e+17, 3.4352836090169303e+28, -1.5784582449945876e+37, 2.244637310223896e-20, -4.4668785331246925e-37, 1.8821590109849165e-25, 76021760.0, -6.55527478390022e+34, -3.848728683538761e+23, 288072046477312.0, -2.0021496686510295e+37, 2576980377600.0, -0.0015106201171875, 374784.0, -3.8496412174785376e-28, 7559142440960.0]), bf16: Bfloat16(1.2773050271995676e+36, sign = 0, exponent=119, mantissa=118), tfbf16: 6.64614e+35
    #[-2.4441935897665156e+20, 6.742775440216064e-07, -5.7931972727168054e-30, -2.1281525885478956e-32, 23776938950656.0, 3.3034284942917713e-20, 2.633107345841924e-35, -1.3658406274475593e-20, -2.6893296075324036e-20, 578813952.0, 14499809591296.0, -0.0458984375, -1.025638970498251e+22, -7.552869850948055e-26, 8.851494298807439e-20, 1.5795024613113804e+20, -16710107136.0, -7.34398467671166e+37, -0.00013446807861328125, 7.691059161069047e-19, -4.9611955367415196e-31, 5.662441253662109e-07, -6.810088283353266e-31, -2.9907629905160607e+37, 614180323328.0, 4.21614504913028e+36, -1.4653669987499396e-19, 54150947667968.0, 5.760204327437074e+33, -6.422418416702717e+24, -102804337197056.0, -4.579669976578771e-16, 106954752.0, 4.85722573273506e-17, -1032.0, 6.72084247699335e-25, -243712.0, 2.8719891998770765e+34, 6.273337765602162e-21, 2.55351295663786e-14, 1.1994118882018901e-22, -4.551514126383897e-35, 1.2048817095928447e-37, -3.893774191965349e-12, 0.0, 1.3624586956795388e+38, -7.229752424169529e-26, 6.938893903907228e-15, -4.188347653454561e+17, 3.4352836090169303e+28, -1.5784582449945876e+37, 2.244637310223896e-20, -4.4668785331246925e-37, 1.8821590109849165e-25, 76021760.0, -6.55527478390022e+34, -3.848728683538761e+23, 288072046477312.0, -2.0021496686510295e+37, 2576980377600.0, -0.0015106201171875, 374784.0, -3.8496412174785376e-28, 7559142440960.0],

    #[['inf', 0, 0, 0], 
    #['inf', 0, 0, 0], 
    #['inf', 0, 0, 0], 
    #['inf', 0, 0, 0]], 
    #[['-inf', 0, 0, 0], 
    #['-inf', 0, 0, 0], 
    #['-inf', 0, 0, 0], 
    #['-inf', 0, 0, 0]], 
    #[['inf', 0, 0, 0], 
    #['-inf', 0, 0, 0], 
    #['inf', 0, 0, 0], 
    #['-inf', 0, 0, 0]], 
    #[[1.0633823332454027e+37 for i in range(32)],
    # [-1.0633823332454027e+37 for i in range(32)]],
    #[[-1468.278564453125, -0.9119449853897095, 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[float('nan'), -0.9119449853897095, 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[float('inf'), -0.9119449853897095, 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[float('-inf'), -0.9119449853897095, 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[float('-inf'), float('inf'), 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[float('inf'), float('inf'), 26.14438247680664, 182.86471557617188, 1.0, -94.27342987060547, 8.845863342285156, -10.456945419311523, -0.761762261390686, 0.07581060379743576, 5.4083733558654785, -0.8609582185745239, 455.4044494628906, -0.7496598362922668, -7696.58935546875, 0.0836593508720398, 4708.72021484375, 0.0018667345866560936, -1.0, 0.05792215093970299, -5359.6591796875, -0.00038562301779165864, 0.10649293661117554, 4.297995567321777, -494.6167297363281, 0.01503029279410839, 0.005615672096610069, -25.338565826416016, -0.15811555087566376, 5712.28076171875, 1.0, 30.514375686645508]],
    #[[4.734203989048582e-28, -2.0873877307511647e+24, -5.585044500209544e-18, -7.182150847520193e+28, 5879326834688.0, 1.586709433361405e-29, -0.015024479478597641, 5.88862104325596e-24, -1.449809034952353e-38, -5.4780144798865056e+26, 2.5220682786028657e-26, -1.939883907724464e-23, 331584930578432.0, -1.0, 2.4101717093314986e+20, 3.0722503498194393e-25, 8.348413397964251e-37, 1.6218954200391147e-19, 4.452369901578056e+29, -8.812118569567762e-12, -8.403232707240264e+17, 1.353924379865394e-20, 5.987398651045214e+24, -1.1221888044193661e-33, -8.675088331597414e+16, -9582192296460288.0, -8.562457532494396e+36, 3.9466107866907075e-16, 5.544002360535857e-21, 5.19932588207789e+34, 1.2226140825077891e-05, -4.569446055842723e+29]],
    #[[-8.357475552533567e-34, 4.632027834211572e-12, 3.712582812790549e-13, 2.3528673906382457e-22, 0.00493718683719635, -2.8906617967894745e+26, -1708543.5, -1.3529643430221147e+27, -992312896.0, 6361092608.0, 6.717625296910329e+33, -1.0092801977194288e-26, -7.940218732696828e+26, -2.208123350025297e-31, 1067574296576.0, -7.135217706109853e-36, -1.3258260134694903e-17, -2.111936601961135e-19, 1045265472.0, -5.1279913668528765e+32, -1.8997838751471774e+23, -1.2427707773301555e+17, -0.009092345833778381, 1133832962048.0, -1.744580160155989e-18, -3.5699272171873776e-29, 1.1776315465052718e+33, -1.946444348301741e-28, -2.802537544146927e-22, 4.910586580919899e+33, -12765160448.0, -3.2336812019348145]],
    #[[9.044247576003729e+29, 7.191107861596865e+18, -7.895608166930187e+30, 5.730218987377151e-31, -1.0556558746729547e-13, 2.5350966371826637e+20, -1.1428787474626599e+34, 3.0879300310336644e-13, -1.955916865729407e-16, -1.3879887204517843e+32, 490079059968.0, 3.0861458533024588e-34, -1.689187778825804e-16, -9.626287296652266e+26, -567578.1875, -0.10264302790164948, -1.7976982749634551e-13, -1.167465944811362e-32, 4.755740515024093e-19, -43179.765625, 1.5136940383292766e-25, -2.4788428140796996e-32, -1.7166388779433485e-20, -6.51384266559717e-32, 3.982779661626523e-10, 125061621088256.0, 1.1860235673533778e-38, 3.8455901694577946e+33, -8093029376.0, 2.52749064778848e-32, -2.987173957080813e-06, 3.4181564004054713e+21]],
    #[[-14.201249122619629, 151280368.0, 1.0842134962906988e+33, 2.0254383623707845e-31, -7.246262193573532e+31, 112039215104.0, -0.0036226073279976845, 1018104960.0, -13.747126579284668, 68091940864.0, -8.572715016637262e-29, 2.5581974644431677e+20, -2.0562568264267213e+29, 8.813956842609782e-19, 8.444884019195611e+27, 0.5252576470375061, 8.337644502181216e+18, -8.565937986059566e+34, 2.697616537261638e-06, -424803001434112.0, -1.5438123470971864e-27, -3.3671721142730085e-34, 1.231949686860743e-22, -2.882928465731828e-23, 4.76596377779257e+35, 8.791760706117202e-07, 4.934117361230208e-19, -6.610925036986684e-20, 1.0046443571566032e+20, -8.009806793163033e+34, 1.5782536078479175e-28, 56944.4140625]],
    #[[-1.0410235518065747e-07, -310010.53125, -5.426288625008516e-37, -2.1443034401178123e-32, 427165745152.0, -8.314001062755384e-26, 9.326828534542883e-29, -6.119293015287426e+21, 29832716.0, -2608793468796928.0, 2.4327533336228886e-33, 2.907035142676377e-37, -0.0014565937453880906, -4867528704.0, -5.860377695010175e+21, -5.991058194902154e+29, 2.9378847154014587e-19, 2.0276194152612173e+24, 1265353621504.0, 2.1263455897036303e-35, -5.5441263568483834e-18, 1.754527950398554e+18, -67512064.0, 5.9759035541746474e+29, 33736181760.0, 0.0004609958559740335, -1.1092416048186227e-12, -5.92732613013776e-17, 396.484375, -6.409507591342845e-08, -2.023747732023112e+20, 0.4762016236782074]],
    #[[-4.8599898595885987e+36, -1.0344205394116608e+16, 1.6675961149069038e-21, 4.609905914885288e-30, 26.75, -7.46875, 2.6772780676820205e+34, -9.065899513581183e-22, 9.361722617407597e+20, -5.773834106690728e+36, -7.205759403792794e+18, 4.417621069237666e-27, 3.481706360490132e+28, -2.8848648071289062e-05, -1.3106762011668506e-36, -8.810729923425242e-13, -3.752245776675559e+33, -1.3231103139882144e+31, 3.8463898483715787e-23, -1.8222477378280798e+31, -6.855454446034265e+33, -2.914335439641036e-16, 5.6066262743570405e-15, 4.658681209898652e-21, 1.0191826100724527e+21, -1.0076804166241485e+17, 3.3034284942917713e-19, -8.204153414298523e-28, -6.346860552976803e+24, 0.06103515625, 1.571603565499018e+25, 9.244463733058732e-31]],
    #[[87.5, 3.260606130216239e+18, 8.795799093214282e-29, 1.0831975343747077e+29, 1.344765537340697e-35, -3.3501588998435194e-37, -1.9807040628566084e+30, -1.1339875512552045e-29, 6.1009488087784225e+35, -2.7648980771697957e+35, -28862180229120.0, -5.73028561552543e-27, -4.6851411639181606e-14, -3.8712052667481695e-22, -1.6732987923012628e+33, 1.2847795743953228e-17, -1.3770399102368736e-32, -1.9845236565174673e-15, -1.3036366453835716e-21, -227.0, -6.377083698467169e+25, 311296.0, 3.672681919735443e-22, 1.6930901125533637e-15, 4.616329562535937e-20, 3.291758785306238e-26, -0.00093841552734375, 2.296835809958953e+18, 3696.0, -2.9203687778241205e-38, 6.511982064694166e-10, 2.8398992587956425e-28]],
    #[[bf16(sign = 1, exponent=-93, mantissa=89), bf16(sign = 1, exponent=74, mantissa=39), bf16(sign = 1, exponent=33, mantissa=28), bf16(sign = 1, exponent=-7, mantissa=23), bf16(sign = 0, exponent=114, mantissa=0), bf16(sign = 1, exponent=-95, mantissa=104), bf16(sign = 1, exponent=0, mantissa=93), bf16(sign = 0, exponent=-76, mantissa=15), bf16(sign = 1, exponent=81, mantissa=32), bf16(sign = 1, exponent=37, mantissa=103), bf16(sign = 1, exponent=101, mantissa=93), bf16(sign = 0, exponent=12, mantissa=68), bf16(sign = 0, exponent=-104, mantissa=36), bf16(sign = 0, exponent=-75, mantissa=88), bf16(sign = 1, exponent=-55, mantissa=17), bf16(sign = 0, exponent=41, mantissa=28), bf16(sign = 1, exponent=-66, mantissa=88), bf16(sign = 0, exponent=58, mantissa=8), bf16(sign = 0, exponent=-77, mantissa=65), bf16(sign = 0, exponent=-98, mantissa=52), bf16(sign = 0, exponent=-97, mantissa=63), bf16(sign = 1, exponent=82, mantissa=102), bf16(sign = 1, exponent=-59, mantissa=93), bf16(sign = 0, exponent=-5, mantissa=69), bf16(sign = 1, exponent=21, mantissa=55), bf16(sign = 0, exponent=86, mantissa=40), bf16(sign = 0, exponent=48, mantissa=87), bf16(sign = 0, exponent=56, mantissa=124), bf16(sign = 1, exponent=11, mantissa=78), bf16(sign = 1, exponent=13, mantissa=9), bf16(sign = 0, exponent=-83, mantissa=82), bf16(sign = 0, exponent=-73, mantissa=88)]]
    # 10 vectors sum
    #[[-1.2064768298714035e+26, -7.207252034366554e-34, -8010239.0, 2.775624085636802e+19, 6.058265775775416e+17, 421849824.0, -1.889922126201209e-29, 16195557261312.0, -6.612228068594686e-22, -31941818368.0, 9.972102370262021e-20, -1.0145865859585926e-16, -6.597879576020205e-08, 9.931847705368924e-11, -5.6716059877825844e-36, -1.0938371736157748e-11, 3.2452008727994696e+18, 1.915694141459661e+16, -1.1334088846021284e+24, -5.6153305589201134e-36, -5.396240162590132e-33, -3.2025768756866455, 4.813125385852738e-15, -1.9682120182551444e-06, -2.4782735610321023e-15, 1.0728064391658014e+28, -3.4499770502441594e-28, -516665.25, 1.5594238389298921e-27, -6.419891867354874e-33, -1.871392083552689e+30, -1.8733212416507055e+21], 
    #[-3.050672769955298e-10, 1.8259010397342706e+22, -4.3428247109567053e-10, -3.247632505337624e-37, -9117237.0, 1.566917867306956e-25, -3.438355760591698e-15, -1.190318421606662e-08, -269699008.0, -7.402667705368099e-22, 42.80364227294922, 13350.92578125, -2.2102909513933466e-17, -6.135803658862835e-30, 2.763635758945925e-19, -4.486868376840647e-10, 9.553853918073082e+20, 527.1878051757812, 0.006554650608450174, -4.7729474555919935e+33, -2.819375194012414e+30, 3.530700237191963e-28, 0.8198925852775574, 1.1071106189812566e+23, -9.611323022453043e-20, -1.1562660932540894, 0.002846447052434087, 3.7546469934955104e+31, -137.74871826171875, -1.0582182263754314e+25, -2.41861019514999e-19, -53.12484359741211], 
    #[6.025256373730158e-17, -16058498940928.0, 2.5351039310679245e+17, -7552564199424.0, 2.7198728009525023e-27, -1.6802872426779913e-09, 4.3842036187253773e-20, -2.7492782371636987e+23, 113647007301632.0, 1.918245061501946e+30, -8.124208536109993e+36, 1.5671464827239373e-35, -0.00021288474090397358, -1.7091381046542336e+16, 2.4972471170769574e+32, 3032.723876953125, -3.372417673484409e-17, -1.5366324818915364e-21, 430.47125244140625, -9.840752887048387e-14, -1.014932011775337e+34, -6.514137673718778e-09, -2.7744779131451066e-37, 3.251750424482225e-09, -5.587140152597924e-21, -154253983744.0, -7.810509146777047e-21, 3.2634292868740192e-37, 0.013729490339756012, -1.213947829708708e-18, -7.646088207025059e-09, 1.2629266325759302e-14], 
    ## error 7
    #[-1.1130488149371781e+18, 1.0422020537843712e+16, -8.7275091894086e-17, 6.710824386102425e+36, -1.7269112432303603e+31, -5.608672700688103e-35, 3.101611671421883e-15, 2.5097632469800096e+30, 6.466241977663748e+30, 3.668276361116749e+26, 3122.3994140625, -4.165071914030705e-06, 1.0977169268964106e+32, 1.0774069664714426e-17, -5.1177621168685405e-11, -5.366473812860731e+18, 1.1118035993090318e-24, 2.5623849343148565e-23, 220734240.0, -9.635282847600666e+33, -2.913025309680961e-05, 5.253322806892042e+25, 4.3610781567837365e+35, 6998439.0, -3.1653787771033856e+23, -1.5733215107746025e+26, 3.526274510653961e-24, -3.1323968419094683e-10, -8.604541880425653e+25, -1.446866093601784e-07, -2.2907595154480562e+35, 5.5461907386779785], 
    #[2.8481654716628992e+17, 7.228742333609262e-07, 2.440432948419406e-32, -5.262865182907957e+18, -2.3132419253949394e-20, -3.900186840155584e-08, -4.56427466857505e-35, 5.212670564055304e+24, -8.37195158179295e-34, 1836.8636474609375, 4.370680483557212e-33, -1.3302361764325288e-25, -8.298051843391342e-22, -2512096067584.0, 5.514971796014403e-35, 1.1362850108555848e-37, 1.3991184946715585e-11, 0.0011188695207238197, 7.728278187075876e+26, -3.3758178644019775e+24, -2.25623097430253e-27, -22722.73046875, 3.2636432962389294e+28, 2.7449361533536213e+29, -7.399724007988441e-32, 483230.03125, -3.405877721213305e-20, 7.051352927618443e+21, -3.302507226021767e-11, 3.599299702727876e-08, -26317710.0, -53437488168960.0], 
    #[9.876806831562745e+29, 25182015488.0, 2.8224700354684273e-10, -1.024922944366409e-13, 1.1843762208332076e-34, -4.714168485388709e-17, 3.907320263259244e-34, 1.7950067941358026e-22, -1.9607168807393022e-13, -8.152430668970721e+18, 4555114.5, 9.093272684926124e+25, -6.195812343947985e+18, -8.08952914134098e+34, -6.743128897482213e+24, 3.904961238951686e-35, -1.8915226281517746e-27, 506.24822998046875, -1.0441527801108552e-26, -1.6123018198310746e-10, -1.1350123878464277e-19, -1.0237046704875622e-21, -1.6812623504229794e+19, -5.014043956751843e-17, -7.629167984662966e-25, -4.035487905016988e-30, -1.314800958323945e-21, -561122816.0, -1.0849821288301275e-36, -5.797606272165478e+16, 10537442304.0, 0.001256785006262362], 
    ## error 4
    #[-2.0821137028575558e+26, -6.883008613279633e-26, 2.9403138606722626e-31, 90429513728.0, -3.328592127542753e+28, -5.090854403285982e-22, 2.0589656649995745e+32, 1436263.875, 2.068919715275695e+25, -1.6736851960722494e-31, -8.32109036835614e-23, -4.63252346053305e+27, 1.8834186044494805e-35, 5.481573940564538e+24, -79763357696.0, -4.778177906226243e-36, -227238784008192.0, -4.688286434420541e-13, -1.596219195938881e+27, 5.644040575490458e+16, 4.794861546058547e+16, -5.850808539942352e+33, -3.9075410218137725e+33, -1.3751679889524654e+20, -9.261584330845133e+30, -0.0004730152140837163, -1.0395640499769019e+36, 1.1823333526889248e+20, -2.11837366533777e+18, 1273815.25, -1.0412073584666546e-37, -6.771600154217985e-24], 
    #[-8.789561902028387e+22, -2.196848146674352e+18, 3.574849216647635e-08, 139055728.0, 8.952842686402923e-33, -28093051830272.0, -5.320713470877272e-25, -6.091957402685085e+34, -4.833144152935891e+18, -479341152.0, -1.4545296613220762e+24, 3.483258865057183e-29, -6.65613168300943e+18, -3267548841771008.0, -21.829341888427734, 3.539133834831883e-15, -1.6593751359858029e+35, -4.120395757922779e-08, -1.2937100117677112e+32, -7.313620542106426e+32, 7.634022836697729e-31, -2.461776040210252e-25, 2.4124693377306883e-36, 1.9817505275687708e-11, 1.0822522581241023e-27, 1.9215623256167697e+28, -1.2001583804366988e-34, 0.002328230068087578, 5571.759765625, -3.578494295247809e-29, 3794208469024768.0, 2.6323802832198788e+23], 
    ## error 2
    #[-1402.037353515625, -5.4145743620325455e+29, 1.897914359005881e-08, 1.2327197704554807e+19, 3.6702380333636996e-35, 111263.3125, -1.1858342086057405e-10, -2.050357943517156e-05, 1.7768976334306628e-27, 1.4832209974401821e-16, -6.39852777577122e+29, -0.952293872833252, -4.059491041990202e-21, -15.753701210021973, 7.5069499015808105, 1.6828851871945445e+30, -1935284895744.0, -3.0479780131916146e+32, -5.408148945685709e+17, -1.128451873330692e+19, 2.725301543325864e+31, 3.0112713724324757e-15, 1.5014597031726528e-27, -4.52465095232102e-36, 7.937535976589328e+24, 9161598304256.0, -1.067161358141008e+35, 6.688419430478395e-38, 126915.75, 3.4305558146835148e-18, 31015.822265625, 470790208.0], 
    ## error 150016
    #[-6.856435902591329e-06, 1.8783720179271768e-06, -7.114721138623548e-13, 2.0727394578413036e+36, 1.532205869842026e-31, 10.83556079864502, -0.0003540833422448486, -2.4342208866105844e-21, -7.772289620710734e-16, 44316250112.0, 2.8102090479666358e+20, 9.690279695579963e+34, 1.115209193736831e+33, -74847958859776.0, -1.3405171548810117e+18, -9.882049036148049e+29, 4.5672798355015336e+27, 5.244222203965051e+35, 1.979231981528097e-28, -1.898470625495836e+23, 7.509320621934249e-29, 4.082352719328407e-26, 1.2581339569696834e-35, -1.6545728851439812e-29, 1.5881400940997992e-06, 1.469087502243771e+31, -9.004671612361046e-29, 111452560.0, -7.371642002834583e-37, -5.055378325846916e-28, -7.577138723199872e-36, -4.1028752463226507e-32]],
#    [[bf16_obj.from_hex(i) for i in j] for j in [
#[0x71a9, 0xf95b, 0xb022, 0x6d0e, 0xa82c, 0x1602, 0xcd5c, 0x64cf, 0x8dae, 0x2c6d, 0x4d7f, 0x54d8, 0x93aa, 0xbe79, 0xc011, 0xc39e, 0xcd7f, 0x3e1f, 0xb780, 0xf916, 0xb6ce, 0xe263, 0xe4fc, 0x4762, 0x93ad, 0xa797, 0xb36d, 0x0d4f, 0xca85, 0x7642, 0x5487, 0x3de8],
#[0x1910, 0x9daf, 0xed14, 0x2f22, 0xb42e, 0x3552, 0x52d3, 0xdbf7, 0xdcb2, 0x46b3, 0xe125, 0x22ee, 0xb331, 0x3c3d, 0x03e7, 0x39a5, 0x0269, 0x8334, 0x9546, 0xb657, 0x0690, 0xc73c, 0xdc0f, 0xf37f, 0x2226, 0xb727, 0xe9c4, 0xdbd4, 0x8af7, 0xde56, 0xb70a, 0x15c6],
#[0xcfb2, 0x3a63, 0x87b9, 0x53c3, 0x891b, 0x3e88, 0xc829, 0x8ebd, 0xc704, 0x09b0, 0xb183, 0xe620, 0xb0aa, 0xbd76, 0xb76f, 0x05c6, 0xfaa5, 0x016a, 0x4e06, 0xb714, 0xdd48, 0xa8f0, 0x102e, 0xe676, 0x54fc, 0x6459, 0x64e0, 0x5739, 0xd16a, 0x0d16, 0xe05c, 0x935f],
#[0x2ccb, 0x24bb, 0xc385, 0x8467, 0x5429, 0x69af, 0x8252, 0x96bb, 0x2a51, 0x00e4, 0x5cb0, 0xdffa, 0x9666, 0xdcb2, 0x3734, 0xf872, 0x1151, 0x42a4, 0xe7a0, 0x81d2, 0x6405, 0x3941, 0x31cc, 0xfc09, 0xf791, 0xe47b, 0x75c5, 0x7ae9, 0x8fd3, 0x19c3, 0xf37e, 0x6f74],
#[0x1167, 0x59f7, 0x5005, 0x0e36, 0x379a, 0xcb00, 0x929c, 0x5879, 0x7ba3, 0x23f9, 0x78d5, 0x489e, 0x22d7, 0xf01d, 0xbd50, 0x4450, 0x74d6, 0xfaf2, 0xf573, 0xa989, 0x374b, 0x570c, 0x3f14, 0xb636, 0x6c25, 0xc200, 0x62b3, 0x599e, 0x617d, 0x4ae9, 0x9fed, 0x5bc1],
#[0x4ded, 0x594d, 0xdce5, 0x7c54, 0x83db, 0xe2f2, 0x55c9, 0x478c, 0xadcd, 0x3b28, 0x4638, 0x6953, 0x2645, 0xdbb9, 0x08db, 0x827a, 0x42e3, 0x0415, 0x571f, 0x6bd0, 0x11b6, 0xd378, 0x6597, 0x3056, 0x8eca, 0xb164, 0x91e5, 0xfb1d, 0xe2cb, 0x2636, 0x558a, 0xf957],
#[0xfb80, 0xfced, 0xd35a, 0x40cd, 0x41a2, 0x3e3a, 0x9b16, 0xae85, 0x4c6d, 0x59ca, 0xa162, 0x55c5, 0x1b8b, 0x977b, 0xd42b, 0xdc16, 0x5b31, 0xfcf8, 0xd74c, 0xc359, 0xbe8a, 0xaa83, 0xbf4d, 0x77c1, 0x468e, 0xf452, 0x8f39, 0xd815, 0xec3b, 0xac4d, 0x70c2, 0x30e7],
#[0xa3ba, 0xcb20, 0x322d, 0xf6bd, 0x5f26, 0x2611, 0x5d1c, 0xbf9c, 0x1bbb, 0x884e, 0xb12d, 0x78ed, 0xa986, 0x4d5d, 0x9126, 0x83a8, 0x6a40, 0x18bf, 0xb281, 0x4b54, 0x11b4, 0xd4ac, 0x0598, 0x6436, 0x956a, 0x4c63, 0x7643, 0x42fa, 0x2486, 0xf470, 0x2121, 0x0bde],
#[0x691d, 0x672f, 0xbfe8, 0xc352, 0x8951, 0x7258, 0xef32, 0x5fe9, 0xbb1f, 0x984d, 0xbcf5, 0xe804, 0xd5f8, 0x3989, 0xa42a, 0xf402, 0x5d40, 0x84f6, 0x1197, 0x7b62, 0x4df6, 0x617d, 0xca7a, 0xfa7a, 0x4b2a, 0x524e, 0x8d3f, 0xee83, 0x6668, 0x4c78, 0xf32a, 0xe1f2],
#[0xed5a, 0x42af, 0x880e, 0x04e4, 0x0fa2, 0xb360, 0x3ee0, 0x923a, 0x8e6a, 0x59d3, 0xd5b8, 0x3c24, 0x225e, 0x86f9, 0x7044, 0x1d28, 0x3673, 0x5d13, 0x2f5e, 0x0dc7, 0x9c6c, 0xe43f, 0x27f4, 0x7431, 0xf258, 0x9179, 0x5b92, 0x5a54, 0x0ae8, 0xd640, 0x78ed, 0x7c0a],
#    ]]
    [
        [0xc4b788ea, 0xbf69753a, 0x41d127b2, 0x4336dd5e, 0x3f800000, 0xc2bc8bff, 0x410d88a8, 0xc1274fa6, 0xbf4302da, 0x3d9b4297, 0x40ad1165, 0xbf5c67c2, 0x43e3b3c5, 0xbf3fe9b5, 0xc5f084b7, 0x3dab5598, 0x459325c3, 0x3af4ad38, 0xbf800000, 0x3d6d3fc7, 0xc5a77d46, 0xb9ca2d72, 0x3dda18f8, 0x4089892e, 0xc3f74ef1, 0x3c76419e, 0x3bb803ac, 0xc1cab562, 0xbe21e90b, 0x45b2823f, 0x3f800000, 0x41f41d71],
        [0xc4b788ea, 0xbf69753a, 0x41d127b2, 0x4336dd5e, 0x3f800000, 0xc2bc8bff, 0x410d88a8, 0xc1274fa6, 0xbf4302da, 0x3d9b4297, 0x40ad1165, 0xbf5c67c2, 0x43e3b3c5, 0xbf3fe9b5, 0xc5f084b7, 0x3dab5598, 0x459325c3, 0x3af4ad38, 0xbf800000, 0x3d6d3fc7, 0xc5a77d46, 0xb9ca2d72, 0x3dda18f8, 0x4089892e, 0xc3f74ef1, 0x3c76419e, 0x3bb803ac, 0xc1cab562, 0xbe21e90b, 0x45b2823f, 0x3f800000, 0x41f41d71]
        ],
    ]
 
    test_operation = 'summation'
    _INPUT_NUM = 32
    _TEST_SET_STRUCTURE = '[[32 elements vector], [32 elements vector], ...]'
    mod_list = {0: (fp32, fp32, fp32), 1: (bf16, bf16, fp32), 2: (bf16, fp32, fp32), 3: (bf16, bf16, bf16)}

    def __init__(self, mod, test_set = test_set) -> None:
        super().__init__(mod, test_set, self.test_operation)
        self.input_ftype = self.set_input_ftype(mod)
    
    def set_ftype(self, mod):
        ftype = self.mod_list[mod][2]
        return ftype

    def set_input_ftype(self, mod):
        ftype = self.mod_list[mod][0]
        return ftype

    # override
    def test_body(self, input: List[List[Union[int, float, bf16, fp32]]]):
        # convert to input type
        a = []
        tfa = []
        for vector in input:
            a_e = []
            tfa_e = []
            for element in vector:
                a_e.append(cast_float(element, self.input_ftype))
                #tfa_e.append(conv_to_tf_dtype(element, self.ftype))
            a.append(a_e)
            #tfa.append(tfa_e)
        res = self.operation(vector_list=a, mod=self.mod) 
        #tfres = self.tf_operation(tfa)

        # fp64
        a_fp64 = 0.0
        for i in input:
            for j in i:
                a_fp64 = a_fp64 + float(j)
        tfres = a_fp64
        tfres = tf.cast(tfres, dtype=tf.float32)
        # end

        #test_hex = f'{[[i.hex() for i in j] for j in a]}, {res.hex()}'
        #print(test_hex)
        # for fp32
        test_hex_in_all = list()
        for j in a:
            test_hex_in = list()
            hex_lo = list()
            for i in j[0:16]:
                hex_lo.append(i.hex())
            test_hex_in.append(hex_lo)
            hex_hi = list()
            for i in j[16:32]:
                hex_hi.append(i.hex())
            test_hex_in.append(hex_hi)
            test_hex_in_all.append(test_hex_in)
        test_hex = f'{test_hex_in_all}, {res.hex()}'
        print(test_hex)
        test_res_str = f'{input}'
        if check_float_equal(res, tfres):
            test_res_str = f'PASSED({self.op}{input}), res: {res}, {res.hex()}'
            #test_res_str = f'PASSED({self.op}{[[i.hex() for i in j] for j in a]}), res: {res.hex()}'
        else:
            test_res_str = f'FAILED({self.op}{input}), bf16: {res}, {res.hex()}, tffp32: {tfres}, ulp_error: {calc_ulp_error(res, tfres)}'
            #test_res_str = f'FAILED({self.op}{[[i.hex() for i in j] for j in a]}), bf16: {res.hex()}, tffp32: {tfres}'
        #print(test_res_str)
        test_ret = list(i for i in input)
        test_ret.append(res)
        test_ret.append(test_res_str)
        return input, res, test_res_str

    # override
    def rand_test(self, times: int):
        vector_num = rand_vector_num
        test_list = []
        fail_list = []
        fail_num = 0
        for i in range(times):
            vector_list = list()
            for j in range(vector_num):
                vector_list.append(self.rand_vector())
            v, fp32_res, test_res_str = self.test_body(vector_list)
            test_list.append([v, fp32_res])
            if check_fail_status(test_res_str):
                fail_list.append(test_res_str)
                fail_num += 1
        check_fail_list(fail_list)
        print('Test fail number', fail_num)
        return test_list

    # this method should be defined in subclasses
    def _check_test_set(self, test_set: List[List[Union[int, float, bf16, fp32]]]) -> bool:
        res = True
        # check structure
        if not isinstance(test_set, list):
            res = False
        for v in test_set:
            # check structure
            if not isinstance(v, list):
                res = False
                for e in v:
                    if not self._check_input_num:
                        res = False
        # input type check is handled in cast_float function in util
        return res   

    # override
    def test(self):
        fail_list = []
        for vector_set in self.test_set:
            _, _, test_res_str = self.test_body(vector_set)
            if check_fail_status(test_res_str):
                fail_list.append(test_res_str)
        check_fail_list(fail_list)
        return

    def rand_vector(self):
        vector = list()
        for i in range(vector_element_num):
            #vector.append(float(random_bf16()))
            vector.append(float(random_fp(self.input_ftype, -126, 122)))
            #vector.append(float(random_fp(self.input_ftype, 0, 0)))
        return vector
